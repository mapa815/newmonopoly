<?xml version="1.0" encoding="UTF-8"?>

<!--	====== New Monopoly Build Script ======
    Build script to be used with ant to compile and deploy New Monopoly to
	a Tomcat server. 
	This script assumes that the source code of the application is organized 
	such that from the top directory where you will run the ant command to 
	execute the build script, you should see the following:

		bld			The location of this build file, along with any other
					build files that will be used for this project.

		doc			All documentation files that will be copied over to 
					the "doc" folder in the final distribution.

		rsrc			Static HTML, CSS, JS and any other resources that will
					be needed for the webpage display for users. This 
					includes a "WEB-INF" subdirectory and its 
					configuration files.

		sql			All scripts that will be needed to setup the database
					on the Tomcat server.

		src			Java source code to be compiled to the "WEB-INF/classes"
					subdirectory of the web application.
 
		tst			Java Junit test code for testing all of the code in the
					"src" subdirectory
-->

<!--The "project" tag describes a set of targets that may be called when
	Ant is executed. The "default" attribute defines the target executed
	when no target is specified, and "basedir" defines the directory for
	Ant to use as the current working directory. Since the build script
	is in the "bld" subdirectory, "basedir" is set to the directory up
	one level from "bld".
	Since the build script is in the "bld" subdirectory, the command
	to run the script is
	"ant build -f bld/build.xml"
	without the quotation marks.
-->

<project name="New Monopoly" default="build" basedir="..">

<!--	====== Property Definitions ======
	These properties are used throughout the rest of the build script.
	Values are set here, and can also be set from the command line by
	using the command
	"ant -Dname=value build bld/build.xml"
	without the quotation marks.
-->

	<tstamp />
	<property name="bin" value="${basedir}/bin" />
	<property name="doc" value="${basedir}/doc" />
	<property name="jar" value="${basedir}/jar" />
	<property name="rslt" value="${basedir}/junit_results" />
	<property name="lib" value="${basedir}/lib" />
	<property name="rsrc" value="${basedir}/rsrc" />
	<property name="sql" value="${basedir}/sql" />
	<property name="src" value="${basedir}/src" />
	<property name="tst" value="${basedir}/tst" />
	<property name="war" value="${basedir}/war" />

	<property name="info.txt" value="${basedir}/info.txt" />
	<property name="jarbasename" value="newMonopoly" />
	<property name="jarextension" value=".jar" />
	<property name="warbasename" value="newMonopoly" />
	<property name="warextension" value=".war" />

	<property name="catalina.home" value="C:/path/to/tomcat/server" /> <!-- THIS NEEDS TO BE UPDATED TO LOCAL TOMCAT SERVER LOCATION -->

	<condition property="is_ver_set">
		<isset property="appvrsn" />
	</condition>

	<path id="classpath">
		<fileset dir="${lib}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${catalina.home}/bin">
			<include name="*.jar" />
		</fileset>
		<pathelement location="${catalina.home}/lib" />
		<fileset dir="${catalina.home}/lib">
			<include name="*.jar" />
		</fileset>
	</path>

	<target name="clean_log">
		<delete file="${info.txt}" failonerror="false" verbose="true" />
	</target>

	<target name="vrsn_avail" if="is_ver_set" depends="clean_log">
		<echo message="Version Provided..." />
		<echo message="Application:        ${ant.project.name}${line.separator}" file="${info.txt}" />
		<echo message="Version:            ${app_vrsn}${line.separator}" file="${info.txt}" append="true" />
	</target>

	<target name="vrsn_unavail" unless="is_ver_set" depends="vrsn_avail">
		<echo message="Version Not Provided..." />
		<echo message="Application:        ${ant.project.name}${line.separator}" file="${info.txt}" />
		<echo message="Version:            Developer Build${line.separator}" file="${info.txt}" append="true" />
		<echo message="Built By:           ${user.name}${line.separator}" file="${info.txt}" append="true" />
	</target>

	<target name="log" depends="vrsn_unavail" description="">
		<echo message="Writing info.txt..." />
		<echo message="Build Date:         ${DSTAMP}${line.separator}" file="${info.txt}" append="true" />
		<echo message="--------------------------------------------------------------------------------${line.separator}" file="${info.txt}" append="true" />
		<echo message="Java Vendor:        ${java.vendor}${line.separator}" file="${info.txt}" append="true" />
		<echo message="Java Version:       ${ant.java.version}${line.separator}" file="${info.txt}" append="true" />
		<echo message="Ant Version:        ${ant.version}${line.separator}" file="${info.txt}" append="true" />
		<echo message="Ant Java Version:   ${ant.java.version}${line.separator}" file="${info.txt}" append="true" />
		<echo message="OS Name:            ${os.name}${line.separator}" file="${info.txt}" append="true" />
		<echo message="OS Version:         ${os.version}${line.separator}" file="${info.txt}" append="true" />
		<echo message="OS Arch:            ${os.arch}${line.separator}" file="${info.txt}" append="true" />
	</target>

	<target name="prep" description="">
		<delete dir="${bin}" failonerror="false" includeemptydirs="true" />
		<delete dir="${doc}" failonerror="false" includeemptydirs="true" />
		<delete dir="${jar}" failonerror="false" includeemptydirs="true" />
		<delete dir="${rslt}" failonerror="false" includeemptydirs="true" />
		<delete dir="${lib}" failonerror="false" includeemptydirs="true" />
		<delete dir="${war}" failonerror="false" includeemptydirs="true" />
		<mkdir dir="${bin}" />
		<mkdir dir="${doc}" />
		<mkdir dir="${jar}" />
		<mkdir dir="${rslt}" />
		<mkdir dir="${lib}" />
		<mkdir dir="${war}" />
	</target>

	<target name="update_libs" description="">
		<get src="https://jdbc.postgresql.org/download/postgresql-42.1.1.jar" dest="${lib}" verbose="true" usetimestamp="true" maxtime="60" retries="1" />

		<get src="http://repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar" dest="${lib}" verbose="true" usetimestamp="true" maxtime="60" retries="1" />
		<get src="http://repo1.maven.org/maven2/junit/junit/4.12/junit-4.12.jar" dest="${lib}" verbose="true" usetimestamp="true" maxtime="60" retries="1" />
		<get src="http://repo1.maven.org/maven2/org/eclipse/persistence/eclipselink/2.6.3/eclipselink-2.6.3.jar" dest="${lib}" verbose="true" usetimestamp="true" maxtime="180" retries="1" />
		<get src="http://repo1.maven.org/maven2/org/eclipse/persistence/javax.persistence/2.1.0/javax.persistence-2.1.0.jar" dest="${lib}" verbose="true" usetimestamp="true" maxtime="60" retries="1" />
		<get src="http://repo1.maven.org/maven2/org/apache/tomcat/tomcat-servlet-api/8.0.30/tomcat-servlet-api-8.0.30.jar" dest="${lib}" verbose="true" usetimestamp="true" maxtime="60" retries="1" />

		<get src="http://central.maven.org/maven2/org/glassfish/hk2/external/aopalliance-repackaged/2.5.0-b05/aopalliance-repackaged-2.5.0-b05.jar" dest="${lib}" verbose="true" usetimestamp="true" maxtime="60" retries="1" />
		<get src="http://central.maven.org/maven2/org/ow2/asm/asm-debug-all/5.0.4/asm-debug-all-5.0.4.jar" dest="${lib}" verbose="true" usetimestamp="true" maxtime="60" retries="1" />
		<get src="http://central.maven.org/maven2/org/glassfish/hk2/hk2-api/2.5.0-b05/hk2-api-2.5.0-b05.jar" dest="${lib}" verbose="true" usetimestamp="true" maxtime="60" retries="1" />
		<get src="http://central.maven.org/maven2/org/glassfish/hk2/hk2-locator/2.5.0-b05/hk2-locator-2.5.0-b05.jar" dest="${lib}" verbose="true" usetimestamp="true" maxtime="60" retries="1" />
		<get src="http://central.maven.org/maven2/org/glassfish/hk2/hk2-utils/2.5.0-b05/hk2-utils-2.5.0-b05.jar" dest="${lib}" verbose="true" usetimestamp="true" maxtime="60" retries="1" />
		<get src="http://central.maven.org/maven2/org/javassist/javassist/3.20.0-GA/javassist-3.20.0-GA.jar" dest="${lib}" verbose="true" usetimestamp="true" maxtime="60" retries="1" />
		<get src="http://central.maven.org/maven2/javax/annotation/javax.annotation-api/1.2/javax.annotation-api-1.2.jar" dest="${lib}" verbose="true" usetimestamp="true" maxtime="60" retries="1" />
		<get src="http://central.maven.org/maven2/org/glassfish/hk2/external/javax.inject/2.5.0-b05/javax.inject-2.5.0-b05.jar" dest="${lib}" verbose="true" usetimestamp="true" maxtime="60" retries="1" />
		<get src="http://central.maven.org/maven2/javax/servlet/javax.servlet-api/3.0.1/javax.servlet-api-3.0.1.jar" dest="${lib}" verbose="true" usetimestamp="true" maxtime="60" retries="1" />
		<get src="http://central.maven.org/maven2/javax/ws/rs/javax.ws.rs-api/2.0.1/javax.ws.rs-api-2.0.1.jar" dest="${lib}" verbose="true" usetimestamp="true" maxtime="60" retries="1" />
		<get src="http://central.maven.org/maven2/javax/xml/bind/jaxb-api/2.2.7/jaxb-api-2.2.7.jar" dest="${lib}" verbose="true" usetimestamp="true" maxtime="60" retries="1" />
		<get src="http://repo1.maven.org/maven2/org/glassfish/jersey/core/jersey-client/2.23.2/jersey-client-2.23.2.jar" dest="${lib}" verbose="true" usetimestamp="true" maxtime="60" retries="1" />
		<get src="http://repo1.maven.org/maven2/org/glassfish/jersey/core/jersey-common/2.23.2/jersey-common-2.23.2.jar" dest="${lib}" verbose="true" usetimestamp="true" maxtime="60" retries="1" />
		<get src="http://repo1.maven.org/maven2/org/glassfish/jersey/containers/jersey-container-servlet/2.23.2/jersey-container-servlet-2.23.2.jar" dest="${lib}" verbose="true" usetimestamp="true" maxtime="60" retries="1" />
		<get src="http://repo1.maven.org/maven2/org/glassfish/jersey/containers/jersey-container-servlet-core/2.23.2/jersey-container-servlet-core-2.23.2.jar" dest="${lib}" verbose="true" usetimestamp="true" maxtime="60" retries="1" />
		<get src="http://central.maven.org/maven2/org/glassfish/jersey/bundles/repackaged/jersey-guava/2.23/jersey-guava-2.23.jar" dest="${lib}" verbose="true" usetimestamp="true" maxtime="60" retries="1" />
		<get src="http://repo1.maven.org/maven2/org/glassfish/jersey/media/jersey-media-jaxb/2.23.2/jersey-media-jaxb-2.23.2.jar" dest="${lib}" verbose="true" usetimestamp="true" maxtime="60" retries="1" />
		<get src="http://repo1.maven.org/maven2/org/glassfish/jersey/core/jersey-server/2.23.2/jersey-server-2.23.2.jar" dest="${lib}" verbose="true" usetimestamp="true" maxtime="60" retries="1" />
		<get src="http://central.maven.org/maven2/org/osgi/org.osgi.core/4.2.0/org.osgi.core-4.2.0.jar" dest="${lib}" verbose="true" usetimestamp="true" maxtime="60" retries="1" />
		<get src="http://central.maven.org/maven2/org/glassfish/hk2/osgi-resource-locator/1.0.1/osgi-resource-locator-1.0.1.jar" dest="${lib}" verbose="true" usetimestamp="true" maxtime="60" retries="1" />
		<get src="http://central.maven.org/maven2/javax/validation/validation-api/1.1.0.Final/validation-api-1.1.0.Final.jar" dest="${lib}" verbose="true" usetimestamp="true" maxtime="60" retries="1" />
	</target>

	<target name="clean_bin">
		<delete includeemptydirs="true" verbose="true" >
			<fileset dir="${bin}" includes="**/*" />
		</delete>
	</target>

	<target name="clean_jar">
		<delete includeemptydirs="true" verbose="true" >
			<fileset dir="${jar}" includes="**/*" />
		</delete>
	</target>

	<target name="clean_tests">
		<delete includeemptydirs="true" verbose="true" >
			<fileset dir="${tst}" includes="**/*.class" />
		</delete>
	</target>

	<target name="clean_sql">
		<delete includeemptydirs="true" verbose="true" >
			<fileset dir="${sql}" includes="**/*.class" />
		</delete>
	</target>

	<target name="clean_rslt">
		<delete includeemptydirs="true" verbose="true" >
			<fileset dir="${rslt}" includes="**/*" />
		</delete>
	</target>

	<target name="clean_doc">
		<delete includeemptydirs="true" verbose="true" >
			<fileset dir="${doc}" includes="**/*" />
		</delete>
	</target>

	<target name="clean_rsrc">
		<delete file="${rsrc}/persistence.xml" includeemptydirs="true" failonerror="false" />
	</target>

	<target name="clean_war">
		<delete includeemptydirs="true" verbose="true" >
			<fileset dir="${war}" includes="**/*" />
		</delete>
	</target>

	<target name="clean" depends="clean_log,clean_bin,clean_jar,clean_war,clean_tests,clean_rslt,clean_doc" description=""/>

	<target name="database_setup">
		<sql driver="${driver}" url="${url}?currentSchema=${schema}" userid="${usr}" password="${pwd}">
			<classpath refid="classpath" />
			<transaction src="${sql}/database.ddl" />
		</sql>
	</target>

	<target name="gen_persist_xml" depends="clean_rsrc" description="">
		<copy file="${rsrc}/persistence.template" tofile="${rsrc}/persistence.xml" />
		<replace file="${rsrc}/persistence.xml" token="${db.url}" value="${url}?currentSchema=${schema}" />
		<replace file="${rsrc}/persistence.xml" token="${db.user}" value="${usr}" />
		<replace file="${rsrc}/persistence.xml" token="${db.password}" value="${pwd}" />
		<replace file="${rsrc}/persistence.xml" token="${db.driver}" value="${driver}" />
	</target>

	<target name="set_tst_xml" depends="gen_persist_xml" description="">
		<copy file="${rsrc}/persistence.xml" tofile="${tst}/META-INF/persistence.xml" />
	</target>

	<target name="compile" depends="clean_bin,log" description="">
		<javac srcdir="${src}" includeantruntime="false" destdir="${bin}" includes="**/Player.java">
			<classpath refid="classpath" />
		</javac>
		<copy todir="${bin}/WEB-INF/classes">
			<fileset dir="${src}" excludes="**/*.java" />
		</copy>
	</target>

	<target name="debug" depends="clean_bin" description="">
		<javac srcdir="${src}" includeantruntime="false" destdir="${bin}" debug="on" debuglevel="lines,vars,source" includes="**/*.java">
			<classpath refid="classpath" />
		</javac>
	</target>

	<target name="compile_tests" depends="clean_tests" description="">
		<javac srcdir="${tst}" includeantruntime="false" destdir="${tst}" includes="**/*.java">
			<classpath>
				<path refid="classpath" />
				<pathelement path="${bin}" />
				<pathelement path="${lib}" />
			</classpath>
		</javac>
	</target>

	<target name="run_tests" depends="set_tst_xml,compile_tests,clean_rslt" description="">
		<junit printsummary="withOutAndErr" haltonerror="true" haltonfailure="true" showoutput="true" logfailedtests="true">
			<classpath>
				<path refid="classpath" />
				<pathelement path="${bin}" />
				<pathelement path="${lib}" />
			</classpath>
			<formatter type="xml" />
			<test name="com.newmonopoly.PlayerTest" todir="${rslt}" />
		</junit>
	</target>

	<target name="report" depends="run_tests" description="">
		<junitreport todir="${rslt}">
			<fileset dir="${rslt}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${rslt}/html" />
		</junitreport>
	</target>

	<target name="jar" unless="is_ver_set" depends="releasejar" description="">
		<jar destfile="${jar}/${jarbasename}${jarextension}" whenmanifestonly="fail">
			<fileset dir="${bin}" includes="**/*.class" />
			<fileset dir="${basedir}" includes="info.txt" />
		</jar>
	</target>

	<target name="releasejar" if="is_ver_set" depends="clean_jar" description="">
		<jar destfile="${jar}/${jarbasename}-${app_vrsn}${jarextension}" whenmanifestonly="fail">
			<fileset dir="${bin}" includes="**/*.class" />
			<fileset dir="${basedir}" includes="info.txt" />
		</jar>
	</target>

	<target name="war" depends="clean_war" description="">
		<war destfile="${war}/${warbasename}${warextension}" webxml="${rsrc}/WEB-INF/web.xml" needxmlfile="true" whenmanifestonly="fail" duplicate="fail">
			<zipfileset dir="${lib}" includes="**/*.jar" prefix="WEB-INF/lib" />
			<zipfileset dir="${jar}" includes="**/*.jar" prefix="WEB-INF/lib" />
			<zipfileset dir="${rsrc}" includes="**/*.html" />
			<zipfileset dir="${rsrc}" includes="**/*.css" />
			<zipfileset dir="${rsrc}" includes="**/*.js" />
			<zipfileset dir="${rsrc}" includes="**/*.php" />
			<zipfileset dir="${rsrc}" includes="**/*.png" />
			<zipfileset dir="${rsrc}" includes="persistence.xml" prefix="WEB-INF/classes/META-INF" />
		</war>
	</target>

	<target name="javadoc" depends="clean_doc" description="">
		<javadoc destdir="${doc}" author="true" version="true" use="true" windowtitle="${ant.project.name} Documentation">
			<fileset dir="${src}" />
			<doctitle><![CDATA[<h1>${ant.project.name} Javadoc</h1>]]></doctitle>
			<link offline="true" href="https://docs.oracle.com/javase/8/docs/api/" packagelistLoc="C:\tmp"/>
		</javadoc>
	</target>

	<target name="build" depends="prep,update_libs,gen_persist_xml,compile,war" description="" />
</project>
